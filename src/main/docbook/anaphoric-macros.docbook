<?xml version="1.0" encoding="utf-8"?>
<chapter version="5.0"
         xml:lang="en"
         xml:id="ch14-anaphoric-macros"
         xreflabel="Anaphoric Macros"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xml="http://www.w3.org/XML/1998/namespace"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xsi:schemaLocation="http://docbook.org/ns/docbook
                             http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink
                             http://www.docbook.org/xml/5.0/xsd/xlink.xsd
                             http://www.w3.org/XML/1998/namespace
                             http://www.docbook.org/xml/5.0/xsd/xml.xsd">
    <title>Anaphoric Macros</title>
    <para>
        Chapter <xref linkend="variable-capture"/>
        treated variable capture exclusively as a problem - as
        something which happens inadvertently, and which can only affect
        programs for the worse. This chapter will show that variable
        capture can also be used constructively. There are some useful
        macros which couldn't be written without it.
    </para>
    <para>
        It's not uncommon in a Lisp program to want to test whether an
        expression returns a non-nil value, and if so, to do something with
        the value. If the expression is costly to evaluate, then one must
        normally do something like this:
    </para>
    <programlisting><![CDATA[
(let ((result (big-long-calculation)))
  (if result
      (foo result)))]]>
    </programlisting>
    <para>
        Wouldn't it be easier if we could just say, as we would in
        English:
    </para>
    <programlisting><![CDATA[
(if (big-long-calculation)
    (foo it))]]>
    </programlisting>
    <para>
        By taking advantage of variable capture, we can write a version
        of if which works just this way.
    </para>
    <section xml:id="sec14-1-anaphoric-variants"
             xreflabel="Anaphoric Variants">
        <title>Anaphoric Variants</title>
        <para>
            In natural language, an <emphasis>anaphor</emphasis>
            is an expression which refers back in the conversation.
            The most common anaphor in English is
            probably "it," as in "Get the wrench and put it on the table."
            Anaphora are a great convenience in everyday language - imagine
            trying to get along without them - but they don't appear much in
            programming languages. For the most part, this is good. Anaphoric
            expressions are often genuinely ambiguous, and present-day
            programming languages are not designed to handle ambiguity.
        </para>
        <para>
            However, it is possible to introduce a very limited form of
            anaphora into Lisp programs without causing ambiguity. An anaphor,
            it turns out, is a lot like a captured symbol. We can use anaphora
            in programs by designating certain symbols to serve as pronouns,
            and then writing macros intentionally to capture these symbols.
        </para>
        <para>
            In the new version of <function>if</function>, the symbol <symbol>it</symbol>
            is the one we want to capture. The anaphoric <function>if</function>,
            called <function>aif</function> for short, is defined as
            follows:
        </para>
        <programlisting><![CDATA[
(defmacro aif (test-form then-form &optional else-form)
  `(let ((it ,test-form))
     (if it ,then-form ,else-form)))]]>
        </programlisting>
        <para>and used as in the previous example:</para>
        <programlisting><![CDATA[
(aif (big-long-calculation)
     (foo it))]]>
        </programlisting>
        <para>
            When you use an aif, the symbol it is left bound to the result
            returned by the test clause. In the macro call, it seems to be
            free, but in fact the expression <code>(foo it)</code> will be
            inserted by expansion of the <function>aif</function> into a
            context in which the symbol <symbol>it</symbol> is bound:
        </para>
        <programlisting><![CDATA[
(let ((it (big-long-calculation)))
  (if it (foo it) nil))]]>
        </programlisting>
        <para>
            So a symbol which looks free in the source code is left bound by
            the macroexpansion. All the anaphoric macros in this chapter use
            some variation of the same technique.
        </para>
        <para>
            <xref linkend="fig14-1-anaphoric-variants-of-cl-operators"/>
            contains anaphoric variants of several Common Lisp
            operators. After <function>aif</function> comes
            <function>awhen</function>, the obvious anaphoric variant of
            when:
        </para>
        <programlisting><![CDATA[
(awhen (big-long-calculation)
       (foo it)
       (bar it))]]>
        </programlisting>
        <para>
            Both <function>aif</function> and <function>awhen</function>
            are frequently useful, but awhile is probably
            unique among the anaphoric macros in being more often needed than
            its regular cousin, while (defined on page 91). Macros like while
            and awhile are typically used in situations where a program needs
            to poll some outside source. And when you are polling a source,
            unless you are simply waiting for it to change state, you will
            usually want to do something with the object you find there:
        </para>
        <programlisting><![CDATA[
(awhile (poll *fridge*)
        (eat it))]]>
        </programlisting>
        <figure xml:id="fig14-1-anaphoric-variants-of-cl-operators">
            <title>Anaphoric variants of Common Lisp operators.</title>
            <programlisting><![CDATA[
(defmacro aif (test-form then-form &optional else-form)
  `(let ((it ,test-form))
     (if it ,then-form ,else-form)))

(defmacro awhen (test-form &body body)
  `(aif ,test-form
        (progn ,@body)))

(defmacro awhile (expr &body body)
  `(do ((it ,expr ,expr))
       ((not it))
     ,@body))

(defmacro aand (&rest args)
  (cond ((null args) t)
        ((null (cdr args)) (car args))
        (t `(aif ,(car args) (aand ,@(cdr args))))))

(defmacro acond (&rest clauses)
  (if (null clauses)
      nil
    (let ((cl1 (car clauses))
          (sym (gensym)))
      `(let ((,sym ,(car cl1)))
         (if ,sym
             (let ((it ,sym)) ,@(cdr cl1))
           (acond ,@(cdr clauses)))))))]]>
            </programlisting>
        </figure>
        <!-- <a name="IDX71" id="IDX71"></a> <a name="IDX72" id="IDX72"></a> -->
        <para>
            The definition of <function>aand</function> is a bit more complicated than the
            preceding ones. It provides an anaphoric version of <function>and</function>; during the
            evaluation of each of its arguments, it will be bound to the value
            returned by the previous argument.<footnote>
                <para>
                    Although one tends to think of <function>and</function>
                    and <function>or</function> together, there would be no point in writing
                    an anaphoric version of <function>or</function>.
                    An argument in an <function>or</function> expression is evaluated only if the previous
                    argument evaluated to <function>nil</function>, so there would be nothing useful
                    for an anaphor to refer to <function>in</function> an <function>aor</function>.
                </para>
            </footnote>
            In practice, <function>aand</function> tends to be used
            in programs which make conditional queries, as in:
        </para>
        <programlisting><![CDATA[
(aand (owner x) (address it) (town it))]]>
        </programlisting>
        <para>
            which returns the town (if there is one) of the address (if
            there is one) of the owner (if there is one) of x. Without
            <function>aand</function>, this expression would have to be written
        </para>
        <programlisting><![CDATA[
(let ((own (owner x)))
  (if own
      (let ((adr (address own)))
        (if adr (town adr)))))
]]></programlisting>
        <para>
            The definition of <function>aand</function> shows that the expansion will vary
            depending on the number of arguments in the macro call. If there
            are no arguments, then <function>aand</function>, like the regular
            <function>and</function>, should simply return <constant>t</constant>.
            Otherwise the expansion is generated recursively, each
            step yielding one layer in a chain of nested <function>aifs</function>:
        </para>
        <programlisting><![CDATA[
(aif #first argument#
     #expansion for rest of arguments#)]]>
        </programlisting>
        <para>
            The expansion of an <function>aand</function> must terminate when there is one
            argument left, instead of working its way down to nil like most
            recursive functions. If the recursion continued until no conjuncts
            remained, the expansion would always be of the form:
        </para>
        <programlisting><![CDATA[
(aif <c 1>
     . . .
     (aif <c n>
          t). . .)]]>
        </programlisting>
        <para>
            Such an expression would always return <constant>t</constant> or
            <constant>nil</constant>, and the example above wouldn't work as intended.
        </para>
        <para>
            Section <xref linkend="recursion"/> warned that if a macro always yielded an expansion
            containing a call to itself, the expansion would never terminate.
            Though recursive, <function>aand</function> is safe because in the base case its
            expansion doesn't refer to <function>aand</function>.
        </para>
        <para>
            The last example, <function>acond</function>, is meant for those cases where the
            remainder of a <function>cond</function> clause wants to use the value returned by the
            test expression. (This situation arises so often that some Scheme
            implementations provide a way to use the value returned by the test
            expression in a <function>cond</function> clause.)
        </para>
        <figure xml:id="fig14-2-more-anaphoric-variants">
            <title>More anaphoric variants.</title>
            <programlisting><![CDATA[
(defmacro alambda (parms &body body)
  `(labels ((self ,parms ,@body))
     #'self))

(defmacro ablock (tag &rest args)
  `(block ,tag
     ,(funcall (alambda (args)
                        (case (length args)
                          (0 nil)
                          (1 (car args))
                          (t `(let ((it ,(car args)))
                                ,(self (cdr args))))))
               args)))]]>
            </programlisting>
        </figure>
        <!-- <a name="IDX73" id="IDX73"></a> -->
        <para>
            In the expansion of an <function>acond</function> clause, the result of the test
            expression will initially be kept in a <function>gensym</function>ed variable, in order
            that the symbol it may be bound only within the remainder of the
            clause. When macros create bindings, they should always do so over
            the narrowest possible scope. Here, if we dispensed with the <function>gensym</function>
            and instead bound it immediately to the result of the test
            expression, as in:
        </para>
        <programlisting><![CDATA[
(defmacro acond (&rest clauses)                ; wrong
  (if (null clauses)
      nil
    (let ((cl1 (car clauses)))
      `(let ((it ,(car cl1)))
         (if it
             (progn ,@(cdr cl1))
           (acond ,@(cdr clauses)))))))]]>
        </programlisting>
        <para>
            then that binding of it would also have within its scope the
            following test expression.
        </para>
        <para>
            <xref linkend="fig14-2-more-anaphoric-variants"/>
            contains some more complicated anaphoric variants.
            The macro <function>alambda</function> is for referring literally to recursive
            functions. When does one want to refer literally to a recursive
            function? We can refer literally to a function by using a
            sharp-quoted lambda-expression:
        </para>
        <programlisting><![CDATA[
#'(lambda (x) (* x 2))]]>
        </programlisting>
        <para>
            But as Chapter <xref linkend="functions"/> explained, you can't express a recursive
            function with a simple lambda-expression. Instead you have to
            define a local function with labels. The following function
            (reproduced from page 22)
        </para>
        <!-- <a name="IDX74" id="IDX74"></a> -->
        <programlisting><![CDATA[
(defun count-instances (obj lists)
  (labels ((instances-in (list)
                         (if list
                             (+ (if (eq (car list) obj) 1 0)
                                (instances-in (cdr list)))
                           0)))
    (mapcar #'instances-in lists)))]]>
        </programlisting>
        <para>
            takes an object and a list, and returns a list of the number of
            occurrences of the object in each element:
        </para>
        <programlisting><![CDATA[
> (count-instances 'a '((a b c) (d a r p a) (d a r) (a a)))
(1 2 1 2)]]>
        </programlisting>
        <para>
            With anaphora we can make what amounts to a literal recursive
            function. The <function>alambda</function> macro uses labels to create one,
            and thus can be used to express, for example, the factorial function:
        </para>
        <programlisting><![CDATA[
(alambda (x) (if (= x 0) 1 (* x (self (1- x)))))]]>
        </programlisting>
        <para>
            Using <function>alambda</function> we can define an equivalent version of
            count-instances as follows:
        </para>
        <programlisting><![CDATA[
(defun count-instances (obj lists)
  (mapcar (alambda (list)
                   (if list
                       (+ (if (eq (car list) obj) 1 0)
                          (self (cdr list)))
                     0))
          lists))]]>
        </programlisting>
        <para>
            Unlike the other macros in
            <xref linkend="fig14-1-anaphoric-variants-of-cl-operators"/> and
            <xref linkend="fig14-2-more-anaphoric-variants"/>, which all
            capture <symbol>it</symbol>, <function>alambda</function>
            captures <symbol>self</symbol>.
            An instance of <function>alambda</function> expands
            into a labels expression in which <symbol>self</symbol> is bound to the function
            being defined. As well as being smaller, <function>alambda</function> expressions look
            like familiar lambda expressions, making code which uses them
            easier to read.
        </para>
        <para>
            The new macro is used in the definition of <function>ablock</function>, an anaphoric
            version of the built-in <function>block</function> special form. In a
            <function>block</function>, the arguments are evaluated left-to-right.
            The same happens in an <function>ablock</function>, but within each
            the variable it will be bound to the value of the previous expression.
        </para>
        <para>
            This macro should be used with discretion. Though convenient at
            times, <function>ablock</function> would tend to beat what could be nice functional
            programs into imperative form. The following is, unfortunately, a
            characteristically ugly example:
        </para>
        <programlisting><![CDATA[
> (ablock north-pole
(princ "ho ")
(princ it)
(princ it)
(return-from north-pole))
ho ho ho
NIL]]>
        </programlisting>
        <para>
            Whenever a macro which does intentional variable capture is
            exported to another package, it is necessary also to export the
            symbol being captured. For example, wherever aif is exported, it
            should be as well. Otherwise the it which appears in the macro
            definition would be a different symbol from an it used in a macro
            call.
        </para>
    </section>
    <section xml:id="sec14-2-failure"
             xreflabel="Failure">
        <title>Failure</title>
        <para>
            In Common Lisp the symbol nil has at least three different jobs.
            It is first of all the empty list, so that
        </para>
        <programlisting><![CDATA[
> (cdr '(a))
NIL]]>
        </programlisting>
        <para>
            As well as the empty list, <constant>nil</constant> is used to
            represent falsity, as in
        </para>
        <programlisting><![CDATA[
> (= 1 0)
NIL]]>
        </programlisting>
        <para>
            And finally, functions return <constant>nil</constant> to indicate failure. For
            example, the job of the built-in <function>find-if</function> is to return the first
            element of a list which satisfies some test. If no such element is
            found, <function>find-if</function> returns <constant>nil</constant>:
        </para>
        <programlisting><![CDATA[
> (find-if #'oddp '(2 4 6))
NIL]]>
        </programlisting>
        <para>
            Unfortunately, we can't tell this case from the one in which
            <function>find-if</function> succeeds, but succeeds in finding
            <constant>nil</constant>:
        </para>
        <programlisting><![CDATA[
> (find-if #'null '(2 nil 6))
NIL]]>
        </programlisting>
        <para>
            In practice, it doesn't cause too much trouble to use <constant>nil</constant> to
            represent both falsity and the empty list. In fact, it can be
            rather convenient. However, it is a pain to have <constant>nil</constant> represent
            failure as well, because it means that the result returned by a
            function like <function>find-if</function> can be ambiguous.
        </para>
        <para>
            The problem of distinguishing between failure and a <constant>nil</constant> return
            value arises with any function which looks things up. Common Lisp
            offers no less than three solutions to the problem. The most common
            approach, before multiple return values, was to return gratuitous
            list structure. There is no trouble distinguishing failure with
            <function>assoc</function>, for example; when successful it
            returns the whole pair in question:
        </para>
        <programlisting><![CDATA[
> (setq synonyms '((yes . t) (no . nil)))
((YES . T) (NO))
> (assoc 'no synonyms)
(NO)]]>
        </programlisting>
        <para>
            Following this approach, if we were worried about ambiguity with
            <function>find-if</function>, we would use <function>member-if</function>,
            which instead of just returning the element satisfying the test,
            returns the whole cdr which begins with it:
        </para>
        <programlisting><![CDATA[
> (member-if #'null '(2 nil 6))
(NIL 6)]]>
        </programlisting>
        <para>
            Since the advent of multiple return values, there has been
            another solution to this problem: use one value for data and a
            second to indicate success or failure. The built-in <function>gethash</function> works
            this way. It always returns two values, the second indicating
            whether anything was found:
        </para>
        <programlisting><![CDATA[
> (setf edible (make-hash-table)
(gethash 'olive-oil edible) t
(gethash 'motor-oil edible) nil)
NIL
> (gethash 'motor-oil edible)
NIL
T]]>
        </programlisting>
        <para>
            So if you want to detect all three possible cases, you can use
            an idiom like the following:
        </para>
        <programlisting><![CDATA[
(defun edible? (x)
  (multiple-value-bind (val found?) (gethash x edible)
    (if found?
        (if val 'yes 'no)
      'maybe)))]]>
        </programlisting>
        <para>thereby distinguishing falsity from failure:</para>
        <programlisting><![CDATA[
> (mapcar #'edible? '(motor-oil olive-oil iguana))
(NO YES MAYBE)]]>
        </programlisting>
        <para>
            Common Lisp supports yet a third way of indicating failure: to
            have the access function take as an argument a special object,
            presumably a <function>gensym</function>, to be returned in case of failure. This
            approach is used with get, which takes an optional argument saying
            what to return if the specified property isn't found:
        </para>
        <programlisting><![CDATA[
> (get 'life 'meaning (gensym))
#:G618]]>
        </programlisting>
        <para>
            Where multiple return values are possible, the approach used by
            <function>gethash</function> is the cleanest. We don't want to have to pass additional
            arguments to every access function, as we do with get. And between
            the other two alternatives, using multiple values is the more
            general; <function>find-if</function> could be written to return two values,
            but <function>gethash</function>
            could not, without consing, be written to return disambiguating
            list structure. Thus in writing new functions for lookup, or for
            other tasks where failure is possible, it will usually be better to
            follow the model of <function>gethash</function>.
        </para>
        <para>
            The idiom found in <function>edible?</function> is just the sort of bookkeeping which
            is well hidden by a macro. For access functions like
            <function>gethash</function> we will
            want a new version of aif which, instead of binding and testing the
            same value, binds the first but also tests the second. The new
            version of <function>aif</function>, called <function>aif2</function>, is shown in
            <xref linkend="fig14-3-multiple-value-anaphoric-macros"/>. Using it we
            could write <function>edible?</function> as:
        </para>
        <programlisting><![CDATA[
(defun edible? (x)
  (aif2 (gethash x edible)
        (if it 'yes 'no)
        'maybe))]]>
        </programlisting>
        <para>
            <xref linkend="fig14-3-multiple-value-anaphoric-macros"/>
            also contains similarly altered versions of <function>awhen</function>,
            awhile, and <function>acond</function>.
            For an example of the use of <function>acond2</function>, see the
            definition of match on page 239. By using this macro we are able to
            express in the form of a <function>cond</function> a function that would otherwise be
            much longer and less symmetrical.
        </para>
        <para>
            The built-in <function>read</function> indicates failure in the same way as
            <function>get</function>. It
            takes optional arguments saying whether or not to generate an error
            in case of <constant>eof</constant>, and if not, what value to return.
            <xref linkend="fig14-4-file-utilities"/>
            contains an alternative version of read which uses a second return
            value to indicate failure: <function>read2</function> returns two values, the input
            expression and a flag which is <constant>nil</constant> upon
            <constant>eof</constant>. It calls read with a <function>gensym</function>
            to be returned in case of <constant>eof</constant>, but to save the trouble of
            building the <function>gensym</function> each time
            <function>read2</function> is called, the function is
            defined as a closure with a private copy of a
            <function>gensym</function> made at compile time.
        </para>
        <para>
            <xref linkend="fig14-4-file-utilities"/>
            also contains a convenient macro to iterate over the
            expressions in a file, written using <function>awhile2</function>
            and <function>read2</function>. Using
            <function>do-file</function> we could, for example, write a
            version of load as:
        </para>
        <programlisting><![CDATA[
(defun our-load (filename)
  (do-file filename (eval it)))]]>
        </programlisting>
        <figure xml:id="fig14-3-multiple-value-anaphoric-macros">
            <title>Multiple-value anaphoric macros.</title>
            <programlisting><![CDATA[
(defmacro aif2 (test &amp;optional then else)
  (let ((win (gensym)))
    `(multiple-value-bind (it ,win) ,test
       (if (or it ,win) ,then ,else))))

(defmacro awhen2 (test &body body)
  `(aif2 ,test
         (progn ,@body)))

(defmacro awhile2 (test &body body)
  (let ((flag (gensym)))
    `(let ((,flag t))
       (while ,flag
         (aif2 ,test
               (progn ,@body)
               (setq ,flag nil))))))

(defmacro acond2 (&rest clauses)
  (if (null clauses)
      nil
    (let ((cl1 (car clauses))
          (val (gensym))
          (win (gensym)))
      `(multiple-value-bind (,val ,win) ,(car cl1)
         (if (or ,val ,win)
             (let ((it ,val)) ,@(cdr cl1))
           (acond2 ,@(cdr clauses)))))))]]>
            </programlisting>
        </figure>
        <!-- <a name="IDX75" id="IDX75"></a>-->
    </section>
    <section xml:id="sec14-3-referential-transparency"
             xreflabel="Referential Transparency">
        <title>Referential Transparency</title>
        <para>
            Anaphoric macros are sometimes said to violate referential
            transparency, which Gelernter and Jagannathan define as follows: A
            language is referentially transparent if (a) every subexpression
            can be replaced by any other that's equal to it in value and (b)
            all occurrences of an expression within a given context yield the
            same value.
        </para>
        <figure xml:id="fig14-4-file-utilities">
            <title>File utilities.</title>
            <programlisting><![CDATA[
(let ((g (gensym)))
  (defun read2 (&optional (str *standard-input*))
    (let ((val (read str nil g)))
      (unless (equal val g) (values val t)))))

(defmacro do-file (filename &body body)
  (let ((str (gensym)))
    `(with-open-file (,str ,filename)
                     (awhile2 (read2 ,str)
                              ,@body))))]]>
            </programlisting>
        </figure>
        <!-- <a name="IDX76" id="IDX76"></a> -->
        <para>
            Note that this standard applies to languages, not to programs. No
            language with assignment is referentially transparent. The first
            and the last x in this expression
        </para>
        <programlisting><![CDATA[
(list x
      (setq x (not x))
      x)]]>
        </programlisting>
        <para>
            yield different values, because a <function>setq</function>
            intervenes. Admittedly, this is ugly code.
            The fact that it is even possible means that
            Lisp is not referentially transparent.
        </para>
        <para>
            Norvig mentions that it would be convenient to redefine
            <function>if</function> as:
        </para>
        <programlisting><![CDATA[
(defmacro if (test then &optional else)
  `(let ((that ,test))
     (if that ,then ,else)))]]>
        </programlisting>
        <para>
            but rejects this macro on the grounds that it violates
            referential transparency.
        </para>
        <para>
            However, the problem here comes from redefining built-in
            operators, not from using anaphora. Clause (b) of the definition
            above requires that an expression always return the same value
            "within a given context." It is no problem if, within this
            <function>let</function> expression,
        </para>
        <programlisting><![CDATA[
(let ((that 'which))
  ...)]]>
        </programlisting>
        <para>
            the symbol that denotes a new variable, because let is
            advertised to create a new context.
        </para>
        <para>
            The trouble with the macro above is that it redefines if, which
            is not supposed to create a new context. This problem goes away if
            we give anaphoric macros distinct names. (As of CLTL2, it is
            illegal to redefine if anyway.) As long as it is part of the
            definition of aif that it establishes a new context in which it is
            a new variable, such a macro does not violate referential
            transparency.
        </para>
        <para>
            Now, aif does violate another convention, which has nothing to
            do with referential transparency: that newly established variables
            somehow be indicated in the source code. The let expression above
            clearly indicates that that will refer to a new variable. It could
            be argued that the binding of it within an aif is not so clear.
            However, this is not a very strong argument: aif only creates one
            variable, and the creation of that variable is the only reason to
            use it.
        </para>
        <para>
            Common Lisp itself does not treat this convention as inviolable.
            The binding of the CLOS function call-next-method depends on the
            context in just the same way that the binding of the symbol it does
            within the body of an aif. (For a suggestion of how
            call-next-method would be implemented, see the macro
            <function>defmeth</function> on page 358.)
            In any case, such conventions are only supposed to be a
            means to an end: programs which are easy to read. And anaphora do
            make programs easier to read, just as they make English easier to
            read.
        </para>
    </section>
</chapter>